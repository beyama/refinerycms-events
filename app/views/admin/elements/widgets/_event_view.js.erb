widgets.EventView = ElementsEditor.ElementBaseView.extend({
  elementTitle: 'Event',

  className: 'element eventView clearfix',

  events: helper.inheritEvents(ElementsEditor.ElementBaseView, {
    "click .select":     "selectEvent",
    "click .eventLabel": "selectEvent",
    "click .eventName":  "selectEvent"
  }),

  initialize: function() {
    ElementsEditor.ElementBaseView.prototype.initialize.apply(this, arguments);

    this.event = this.model.get('event');

    if(!this.event) {
      this.event = new Elements.EssenceAny(); 
      this.model.set({ event: this.event });
    }

    this.eventData = this.event.get('value_data') || {};

    this.event.bind('change:value_id', function(_, id) { $(this.idField).val(id); }, this);
    this.event.bind('change:name', function(_, name) { $(this.eventName).text(name); }, this);
  
    var self = this;
    this.callbackName = 'callback_' + this.cid;
    window[this.callbackName] = function(event) {
      self.event.set({ value_id: event.id, name: event.name });
    }
  },

  render: function() {
    ElementsEditor.ElementBaseView.prototype.render.apply(this, arguments);

    var eventId = this.cid + '-event',
        nameId  = this.cid + '-name',
        limitId = this.cid + '-limit';

    this.typeField = this.make('input', {
      name: this.inputName() + '[event_type]',
      value: 'EventDescription',
      type: 'hidden'
    });

    this.eventLabel = this.make('label', { 
      for: eventId, 
        'class': 'eventLabel' 
    }, 'Event: ');

    this.idField = this.make('input', {
      id: eventId,
      name: this.inputName() + '[event_id]',
      value: this.event.get('value_id'),
      type: 'hidden'
    });

    this.eventName = this.make('span', { 
      id: nameId, 
      'class': 'eventName' 
    }, 'No event selected');

    this.limit = this.getWidgetForProperty('limit', { tagName: 'span', togglable: false, });

    var icon = this.make('img', { 
      height: 16,
      width: 16,
      src: '/images/refinery/icons/zoom.png',
      alt: 'Select event'
    });
    this.selectButton = this.make('a', { 'class': 'select' }, icon);

    this.body()
      .append(this.idField)
      .append(this.typeField)
      .append(this.eventLabel)
      .append(this.eventName)
      .append(this.limit.render().el)
      .append(this.selectButton);

    // Styles
    $(this.limit.el).css('width', 'auto');
    var limitLabel = $(this.limit.el).find('label').get(0);

    $([this.eventLabel, this.eventName, limitLabel]).css({ 
      display: 'inline-block',
      'margin-right': '10px' 
    });
    $(this.eventName).css('min-width', '250px');
    $(this.selectButton).css('margin-left', '8px');

    // copy event name to event model
    if(this.eventData.name) this.event.set({ name: this.eventData.name });

    return this;
  },

  selectEvent: function(e) {
    this.closeSelectDialog();
    this.openSelectDialog();
    e.preventDefault();
  },

  openSelectDialog: function() {
    var src = '<%= dialog_admin_events_path %>',
        iframe = $("<iframe id='dialog_iframe' frameborder='0' marginheight='0' marginwidth='0' border='0'></iframe>");

    iframe.dialog({
      title: "Select event",
      modal: true,
      resizable: false,
      width: 800,
      height: 500
    });

    iframe.attr('src', src + '?callback=' + this.callbackName + '&selected=' + this.event.get('value_id'));

    if(!$.browser.msie) { iframe.dialog('widget').corner('8px'); }
  },

  closeSelectDialog: function() {
    this.$('#dialog_iframe').dialog('close').remove();
  }

});

ElementsEditor.defaultWidgets['Event'] = 'EventView';

/* vim: set filetype=javascript: */
